package com.parneet.smartlayer.data.video

import android.content.Context
import android.graphics.Bitmap
import android.net.Uri
import com.parneet.smartlayer.common.Resource
import com.parneet.smartlayer.data.video.youtube.YoutubeVideoStreamService
import com.parneet.smartlayer.model.Folder
import com.parneet.smartlayer.model.StreamSubtitle
import com.parneet.smartlayer.model.StreamVideoOnly
import com.parneet.smartlayer.model.Video
import com.parneet.smartlayer.model.VideoMetaData
import com.parneet.smartlayer.model.YoutubeStream
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

class VideoRepository {

    suspend fun getVideoFolders(applicationContext: Context): Resource<List<Folder>> {
        return withContext(Dispatchers.IO) {
            try {
                val folderList = VideoManager.getVideoFolders(applicationContext)
                return@withContext Resource.Success(folderList)
            } catch (e: Exception) {
                return@withContext Resource.Error(e)
            }
        }
    }

    suspend fun getVideosInFolder(
        applicationContext: Context,
        bucketId: String
    ): Resource<List<Video>> {
        return withContext(Dispatchers.IO) {
            try {
                val videoList = VideoManager.getVideosInFolder(applicationContext, bucketId)
                return@withContext Resource.Success(videoList)
            } catch (e: Exception) {
                return@withContext Resource.Error(e)
            }
        }
    }

    fun getVideoThumbnail(
        applicationContext: Context,
        uri: Uri,
        widthInDp: Int,
        heightInDp: Int,
        sizeInPixels: (Int) -> Int
    ): Resource<Bitmap?> {
        return try {
            Resource.Success(
                VideoManager.loadThumbnail(
                    applicationContext,
                    uri,
                    widthInDp,
                    heightInDp,
                    sizeInPixels
                )
            )
        } catch (e: Exception) {
            Resource.Error(e)
        }
    }

    fun getVideoThumbnail(
        applicationContext: Context,
        uri: Uri,
        widthInPixels: Int,
        heightInPixels: Int,
    ): Resource<Bitmap?> {
        return try {
            Resource.Success(
                VideoManager.loadThumbnail(
                    applicationContext,
                    uri,
                    widthInPixels,
                    heightInPixels
                )
            )
        } catch (e: Exception) {
            Resource.Error(e)
        }
    }

    suspend fun getSubtitleName(
        applicationContext: Context,
        subtitleUri: Uri?,
        defaultTitle: String
    ): Resource<String> {
        return try {
            val title = VideoManager.getSubtitleName(subtitleUri, applicationContext)
            Resource.Success(title)
        } catch (e: Exception) {
            Resource.Error(e, defaultTitle)
        }
    }

    suspend fun getVideoMetaData(
        applicationContext: Context,
        video: Video
    ): Resource<VideoMetaData> {
        return try {
            val videoMetaData = VideoManager.fetchMetaData(applicationContext, video)
            Resource.Success(videoMetaData)
        } catch (e: Exception) {
            Resource.Error(e)
        }
    }

    suspend fun getVideoTitle(applicationContext: Context, uri: Uri): Resource<String?> {
        return try {
            val title = VideoManager.fetchVideoTitle(applicationContext, uri)
            Resource.Success(title)
        } catch (e: Exception) {
            Resource.Error(e)
        }
    }

    suspend fun getYoutubeStreamVideo(youtubeVideoUrl: String): Resource<YoutubeStream> {
        return try {
            val youtubeVideoStreamService = YoutubeVideoStreamService()
//            val videoAudioStream = youtubeVideoStreamService.getVideoAudioStream(youtubeVideoUrl)
            val streamTitle = youtubeVideoStreamService.getStreamTitle(youtubeVideoUrl)

            val vp9VideoOnlyStream = youtubeVideoStreamService.getVideoOnlyStream(youtubeVideoUrl)
                ?.map { StreamVideoOnly(it.content, it.getResolution(), it.fps, it.codec) }

            val subtitlesStreamList = youtubeVideoStreamService.getSubtitlesStream(youtubeVideoUrl)

            val streamSubtitlesList = subtitlesStreamList?.map { subtitlesStream ->
                if (subtitlesStream != null) {
                    StreamSubtitle(
                        subtitlesStream.displayLanguageName,
                        subtitlesStream.content,
                        subtitlesStream.isAutoGenerated
                    )
                } else {
                    null
                }
            }
            val youtubeStream =
                YoutubeStream(streamTitle, vp9VideoOnlyStream!!, streamSubtitlesList)
            Resource.Success(youtubeStream)
        } catch (e: Exception) {
            Resource.Error(e)
        }
    }

}